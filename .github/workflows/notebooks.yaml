# Notebook-related checks
name: Notebooks

on:
  pull_request:
    paths:
      - "**.ipynb"
  workflow_dispatch:

jobs:
  nbfmt:
    name: Notebook format and testing
    runs-on: ubuntu-latest

    # Only push when the PR branch lives in the same repository
    if: github.event.pull_request.head.repo.full_name == github.repository

    steps:
      # Checkout the PR branch with a PAT so the follow-up commit re-triggers all workflows
      - uses: actions/checkout@v4
        with:
          ref:   ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.BOT_PAT }}      # PAT for the bot account
          fetch-depth: 0                     # merge-base needs full history

      # Python and tooling
      - uses: actions/setup-python@v4

      - name: Install tensorflow-docs (provides nbfmt)
        run: python -m pip install -qU git+https://github.com/tensorflow/docs

      # Identify as the bot for commits
      - name: Configure Git user
        run: |
          git config --local user.email "kasyapanand7+1@github.com"
          git config --local user.name  "andyservice"

      # Main loop: test each notebook, format if needed, single commit at the end
      - name: Check notebooks one-by-one, format if required
        run: |
          set -e

          # 1. Collect notebooks touched in this PR
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            base=$(git merge-base HEAD origin/${{ github.event.pull_request.base.ref }})
            readarray -t notebooks < <(git diff --name-only "${base}...HEAD" "*.ipynb")
          else
            readarray -t notebooks < <(find . -name '*.ipynb')
          fi

          if [[ ${#notebooks[@]} -eq 0 ]]; then
            echo "No notebooks modified in this pull request."
            exit 0
          fi

          echo "Notebook list: ${notebooks[*]}"

          # 2. Loop: run --test, format when necessary
          reformatted=false
          for nb in "${notebooks[@]}"; do
            echo "::group::${nb}"
            set +e
            python -m tensorflow_docs.tools.nbfmt --test "${nb}"
            test_rc=$?
            set -e

            if [[ $test_rc -eq 0 ]]; then
              echo "✔ ${nb} already formatted"
            else
              echo "✘ ${nb} needs formatting → applying formatter"
              python -m tensorflow_docs.tools.nbfmt "${nb}"
              reformatted=true
            fi
            echo "::endgroup::"
          done

          # 3. One commit if anything changed
          if [[ "$reformatted" == "true" ]]; then
            git add "${notebooks[@]}"
            git commit -m "style: auto-format notebooks with nbfmt"
            git push
          else
            echo "All notebooks already in canonical format – nothing to commit."
          fi

  nblint:
    name: Notebook lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Get *full* history
    - uses: actions/setup-python@v4
    - name: Install tensorflow-docs
      run: python3 -m pip install -U git+https://github.com/tensorflow/docs
    - name: Fetch main branch
      run: git fetch -u origin main:main

    # Lint for all notebooks
    - name: Lint notebooks
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          # Only check notebooks modified in this pull request
          base_commit=$(git merge-base HEAD ${{ github.event.pull_request.base.sha }})
          readarray -t changed_notebooks < <(git diff --name-only "${base_commit}...HEAD" "*.ipynb" | grep -v 'gemini-2/' || true)
        else
          # Manual run, check everything
          readarray -t changed_notebooks < <(find . -name '*.ipynb' | grep -v 'gemini-2/')
        fi

        # Define files to exclude from linting
        excluded_files=(
          "examples/Object_detection.ipynb",
          "quickstarts/Template.ipynb",
        )

        # Filter out excluded files from the changed_notebooks array
        filtered_notebooks=()
        for notebook in "${changed_notebooks[@]}"; do
          exclude=false
          for excluded_file in "${excluded_files[@]}"; do
            if [[ "$notebook" == "$excluded_file" ]]; then
              exclude=true
              break
            fi
          done
          if [[ "$exclude" == false ]]; then
            filtered_notebooks+=("$notebook")
          fi
        done

        if [[ ${#filtered_notebooks[@]} == 0 ]]; then
          echo "No website notebooks modified in this pull request."
          exit 0
        else
          echo "WARNING: If the button_colab check fails for you, make sure you have <table class=\"tfo-notebook-buttons\"...>"
          echo "Lint check with nblint:"
          python3 -m tensorflow_docs.tools.nblint \
            --styles=google,gemini_cookbook \
            --arg=repo:google-gemini/cookbook \
            --arg=branch:main \
            --exclude_lint=gemini_cookbook::button_download \
            --exclude_lint=gemini_cookbook::button_website \
            --arg=base_url:https://ai.google.dev/ \
            --exclude_lint=gemini_cookbook::button_github \
            "${filtered_notebooks[@]}"
        fi
